//
//  AppRootWorker.swift
//  DogePay
//
//  Created by Victor Lee on 2023/03/09.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON
import RxSwift
import RxRelay

class AppRootWorker: NSObject {

    var websocketTask: URLSessionWebSocketTask? = nil
    var price: PublishRelay<Msg> = PublishRelay()

    fileprivate func disconnect(){
        print(#fileID, #function, #line, "- ")
        websocketTask?.cancel(with: .goingAway, reason: nil)
    }

    func connect(){
        print(#fileID, #function, #line, "- ")

        disconnect()

        let session = URLSession(configuration: .default,
                                 delegate: self,
                                 delegateQueue: OperationQueue())

        guard let url = URL(string: "wss://ws.dogechain.info/inv") else { return }

        websocketTask = session.webSocketTask(with: url)
        websocketTask?.resume()
        receiveMsg()
        sendMessage()
    }

    fileprivate func receiveMsg() {
        print(#fileID, #function, #line, "- ")

        websocketTask?.receive(completionHandler: { [weak self] (result :Result<URLSessionWebSocketTask.Message, Error>) in
            guard let self = self else { return }
            switch result {
            case .success(.string(let msg)):
                print(#fileID, #function, #line, "- success(.string) msg: \(msg)")

                do {
                    let decoder = JSONDecoder()
                    let result = try decoder.decode(SocketResponse.self, from: Data(msg.utf8))
                    if let msg = result.msg {
                        self.price.accept(msg)
                    }
                } catch {
                    print("error : \(error.localizedDescription)")
                }
                self.receiveMsg()
            case .success(.data(let msg)):
                print(#fileID, #function, #line, "- success(.data) msg: \(msg)")
            case .success(let msg):
                print(#fileID, #function, #line, "- success() msg: \(msg)")
            case .failure(let failure):
                print(#fileID, #function, #line, "- failure: \(failure)")
            }
        })
    }

    fileprivate func sendMessage() {
        print(#fileID, #function, #line, "- ")

        let dictionary = ["op" : "price_sub"]
        guard let jsonString = JSON(dictionary).rawString() else { return }

        let messageToSend = URLSessionWebSocketTask.Message.string(jsonString)

        self.websocketTask?.send(messageToSend, completionHandler: { err in
            print(#fileID, #function, #line, "- err: \(String(describing: err))")
        })
    }
}

// MARK: WebSocket
extension AppRootWorker : URLSessionWebSocketDelegate {
    func urlSession(_ session: URLSession, webSocketTask: URLSessionWebSocketTask, didOpenWithProtocol protocol: String?) {
        print(#fileID, #function, #line, "- 연결됨 , session: \(session)")
    }


    func urlSession(_ session: URLSession, webSocketTask: URLSessionWebSocketTask, didCloseWith closeCode: URLSessionWebSocketTask.CloseCode, reason: Data?) {
        print(#fileID, #function, #line, "- 끊김 , session: \(session), closeCode: \(closeCode), reason: \(reason)")
    }
}
