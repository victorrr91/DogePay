//
//  ChartHomeInteractor.swift
//  DogePay
//
//  Created by Victor Lee on 2023/03/12.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol ChartHomeBusinessLogic {
    func fetchPriceList()
}

protocol ChartHomeDataStore {

    var price: BehaviorRelay<Msg?> { get set }
    var bitcoinList: BehaviorRelay<[Msg]> { get set }
    var dolloarList: BehaviorRelay<[Msg]> { get set }
    var etherList: BehaviorRelay<[Msg]> { get set }
    var audList: BehaviorRelay<[Msg]> { get set }
}

class ChartHomeInteractor: ChartHomeBusinessLogic, ChartHomeDataStore {

    var price: BehaviorRelay<Msg?> = BehaviorRelay(value: nil)
    var bitcoinList: BehaviorRelay<[Msg]> = BehaviorRelay(value: [])
    var dolloarList: BehaviorRelay<[Msg]> = BehaviorRelay(value: [])
    var etherList: BehaviorRelay<[Msg]> = BehaviorRelay(value: [])
    var audList: BehaviorRelay<[Msg]> = BehaviorRelay(value: [])

    var disposeBag = DisposeBag()

    var presenter: ChartHomePresentationLogic?
    var worker: ChartHomeWorker?

    // MARK: Do something

    func fetchPriceList() {
        price.subscribe(onNext: { [weak self] data in
            guard let data = data else { return }
            self?.presenter?.presentPriceTableView(data: data)

            if let priceBase = data.priceBase {
                if priceBase == PriceType.BTC.rawValue {
                    let bitcoinList = self?.bitcoinList.value ?? []
                    self?.bitcoinList.accept(bitcoinList + [data])
                } else if priceBase == PriceType.USD.rawValue {
                    let dollarList = self?.dolloarList.value ?? []
                    self?.dolloarList.accept(dollarList + [data])
                } else if priceBase == PriceType.ETH.rawValue {
                    let ehtList = self?.etherList.value ?? []
                    self?.etherList.accept(ehtList + [data])
                } else {
                    let audList = self?.audList.value ?? []
                    self?.audList.accept(audList + [data])
                }
            }
        }).disposed(by: disposeBag)
    }
}
